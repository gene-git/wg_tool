#!/usr/bin/python3
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: © 2022-present  Gene C <arch@sapience.com>
"""
When using linux as a client, there are 2 ways to bring up wg.

  (a) by default wg-quick uses resolvconf to change /etc/resolv.conf
      If using this method this script is not needed.
      The client.conf file should have DNS = comma separated list of IPS
      and optinally domains to add to search list.

  (b) PostUp to save existing resolv.conf, install wg resolv.conf
      PostDown to restire the resolv.conf from saved.

  This script implements (b) - both --up and --down

  e.g.
  PostUp = wg-peer-updn -u  -dns 10.0.0.1,10.0.0.2 -dnsrch foo.example.com,example.com
  PostDown = wg-peer-updn -d

  In either case to start and stop vpn
    wg-quick up <foo.conf>
    wg-quick down <foo.conf>

  NB
    - This should be standalone tool so we dont use any of utilities in wg-tool library
    -

"""
# pylint: disable=invalid-name,too-many-instance-attributes,too-few-public-methods
import os
import argparse
from datetime import datetime

#-------------------------------------
# Options/Settings
#--------------
class WgSettings:
    """
    parse command line
      -up
      -down
      -dns=ip1,ip2.
      -dnsrch=dom1,dom2
    """
    def __init__(self):

        #
        # Keep on same filesytem so we can rename instead of copy
        # resolv_wg is a backup of resolv.conf - if laptop sleep/resume's
        # then may find resolv.conf is set back to pre-wg - so
        # this allows us to restore wg config
        # Used by wg-fix-dns application
        #
        self.resolv = '/etc/resolv.conf'
        self.resolv_wg = '/etc/resolv.conf.wg'
        self.resolv_save = '/etc/resolv.conf.saved'

        # testing
        #self.resolv = './resolv.conf'
        #self.resolv_save = './resolv.conf.saved'

        self.up = False
        self.down = False
        self.dns_ips = None
        self.dns_search = None

        desc = 'wg peer for wg-quick PostUp / PostDown'

        opts = [
                [('-u', '--up'), {'help' : 'For PostUp', 'action'   : 'store_true'}],
                [('-d', '--down'), {'help' : 'For PostDown', 'action'   : 'store_true'}],
                [('-dns', '--dns_ips'), {'help'     : 'List of dns ips (comma separated)'}],
                [('-dnsrch', '--dns_search'),  {'help'     : 'List of dns search domains'}],
               ]

        # Set options to be parsed
        par = argparse.ArgumentParser(description=desc)
        for opt in opts:
            (opt_s, opt_l), kwargs = opt
            if opt_l :
                par.add_argument(opt_s, opt_l, **kwargs)
            else:
                par.add_argument(opt_s, **kwargs)

        # parse options and map to class attributes
        parsed = par.parse_args()
        if parsed:
            for (opt, val) in vars(parsed).items():
                setattr(self, opt, val)

        if self.dns_ips:
            self.dns_ips_list = self.dns_ips.split(',')

        if self.dns_search:
            self.dns_search_list = self.dns_search.split(',')

    def __getattr__(self, name):
        """ non-set items simply return None makes it easy to check existence"""
        return None


#-------------------------------------
# File utils
#--------------
def open_file(path, mode):
    """
    Open a file and return file object
    """
    # pylint: disable=W1514,R1732
    try:
        fobj = open(path, mode)
    except OSError as err:
        print(f'Error opening file {path} : {err}')
        fobj = None
    return fobj

def read_file(f_from):
    """
    read file
    """
    data = None
    if os.path.exists(f_from):
        fobj = open_file(f_from, 'r')
        if fobj:
            data = fobj.read()
            fobj.close()

    return data

def write_file(data, f_to):
    """
    write file
    """
    okay = True
    fobj = open_file(f_to, 'w')
    if fobj:
        fobj.write(data)
        fobj.close()
        return okay
    return not okay

def rename_file(f_from, f_to):
    """
    rename file (same filesys as usual)
    """
    okay = True
    if os.path.exists(f_to):
        try:
            os.unlink(f_to)
        except OSError as err:
            print(f'Error saving {f_from}: Failed to delete old {f_to} : {err}')
            okay = False

    try:
        os.rename(f_from, f_to)
    except OSError as err:
        print(f'Error renaming {f_from} to {f_to} : {err}')
        okay = False

    return okay

#-------------------------------------
# The wg stuff
#--------------

def date_str():
    """ time stamp for the wg resolv file """
    fmt = '%Y-%m-%d %H:%M:%S'
    now = datetime.today()
    now_str = now.strftime(fmt)
    return now_str

def make_wg_resolv(settings):
    """
    build the resolv.conf for wg
    """
    now = date_str()
    resolv = f'#\n# Wireguard Resolv.conf\n# {now}\n#\n'
    if settings.dns_search_list:
        dns_search = ' '.join(settings.dns_search_list)
        resolv += f'search {dns_search}\n'
    if settings.dns_ips_list:
        for one_ip in settings.dns_ips_list:
            resolv += f'nameserver {one_ip}\n'

    return resolv

def post_up(settings):
    """
     - save resolv.conf
     - install wg resolv.conf
    """
    okay = True
    wg_resolv = make_wg_resolv(settings)

    # these are both on same filesystem, can be file or link (e.g. NetworkManager)
    if not rename_file(settings.resolv, settings.resolv_save):
        return not okay

    if not write_file(wg_resolv, settings.resolv):
        return not okay

    # keep copy for easy dns fixup
    if not write_file(wg_resolv, settings.resolv_wg):
        return not okay
    return okay

def post_down(settings):
    """
     - restore resolv.conf
    """
    okay = rename_file(settings.resolv_save, settings.resolv)
    if os.path.exists(settings.resolv_wg):
        os.unlink(settings.resolv_wg)
    return okay

def main():
    """
    Support for linux wg clients
    """
    settings = WgSettings()

    if settings.up:
        if not post_up(settings):
            print('Post up failed')

    elif settings.down:
        if not post_down(settings):
            print('Post up failed')

if __name__ == '__main__':
    main()
