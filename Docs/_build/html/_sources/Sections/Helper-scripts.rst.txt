.. SPDX-License-Identifier: GPL-2.0-or-later

.. _Helper-scripts:

*******************
Convenience Scripts
*******************

Gateway Nftables Script
=======================

The nftables sample script is found in:

.. code-block:: none

    scripts/postup.nft
    
it should be copied to /etc/wireguard/scripts on each gateway server.

Edit the network variables at the top of the *postup.nft* script to match the
server network settings.

In the event a gateway provides client access to the internet via the gateway, and / or 
to any internal network(s) this script will NAT all tunnel traffic providing access
to the same networks the server has access to.

The *postup.nft* script provides access to the internet and lan provided the wireguard server 
host has that access.  

If the gateway is behind a border firewall then that must forward the vpn (UDP) traffic 
to the wireguard server which running on the inside. 

If the gateway server is in a DMZ then it may have more limited access.

Before deploying the *postup.nft* script, edit the 3 variables at the top for 
each server setup it is being deployed on:

* vpn_net  

  this cidr block must match the wireguard internal tunnel network.

* lan_ip lan_iface  

  IP and interface of the server

Remember also to allow forwarding on the gateway server, to ensure VPN traffic 
is permitted to go to the LAN::

        sysctl -w net.ipv4.ip_forward=1

to keep this permanent, add to */etc/sysctl.d/20-sysctl.conf* (or similar filename)::

        net.ipv4.ip_forward = 1

The gateway config generated by the tool is how peers are managed.
For example existing Accounts/profiles can be marked inactive to remove them
from the gateway config and new ones can easily be added. After 
making changes, simply copy the resulting gateway config to /etc/wireguard/
where you can use *wg-quick* to start/stop the wireguard server.


.. _dns-script:

Linux Client DNS Script
-----------------------

This is located in:

.. code-block:: none

   scripts/wg-peer-updn

When using linux as a wireguard client, there are 2 ways to bring up wg.

* by default wg-quick uses resolvconf to change /etc/resolv.conf
  If using this method this script is not needed.
  The client.conf file should have DNS = comma separated list of IPS
  and optinally domains to add to search list.

* PostUp to save existing resolv.conf, install wg resolv.conf
  PostDown to restire the resolv.conf from saved.

This script implements the second approach and handles both --up and --down

  e.g.
  PostUp = wg-peer-updn -u  -dns 10.0.0.1,10.0.0.2 -dnsrch foo.example.com,example.com
  PostDown = wg-peer-updn -d

  In either case to start and stop vpn
    wg-quick up <foo.conf>
    wg-quick down <foo.conf>


In practice, for any linux client simply copy the script on the client:

.. code-block:: bash

   cp scripts/wg-peer-updn /etc/wireguard/scripts/wg-peer-updn

and *--edit* the client profile and set the flag:

.. code-block:: none

    dns_linux = true

*wqg-tool* will take care of the rest. It will compile the unique list of 
DNS servers taken from profile, all gateways and vpn info.

This will use whatever DNS servers the gateway provides (via *DNS* setting) together 
with the script in the client profile's *PostUp/PostDown* settings.

Note that on other operating systems (e.g. phones), they use whatever DNS servers the gateway
provides in it's *dns* variable.

See :ref:`Options-section` for more detail.


