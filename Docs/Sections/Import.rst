

.. _wg-import:

Importing From Standard Wireguard Configs
=========================================

It is possible to import from standard wireguard configs.
This makes it straightforwd to move an existing vpn setup so 
it can be managed by *wg-tool*.

Note that there is one caveat which may require small adjustment
after import completes.

Limitations and Networks
------------------------

Wireguard configs provide network information in the *AllowedIPs* 
variable. *wg-tool* requires some knowledge about the network topology
to enable it to make appropriate adjustments as any changes are made.

Specifically networks are treated as provided by (*nets_offered*)
or desired (*nets_wanted*). These can be modified by editing
*nets_offered* or by using the command line option *nets-wanted-add*.
And similarly for *wanted*. The wireguard configs do not relate
the network topology, only what each pair of peers is willing 
to communicate. Which is fine and complete for it's needs.

Hence, after importing, you may need to manually add the right 
information about which peers offer or want which networks.

As simple example consider a vpn with a single gateway and one client
sharing a single network *net-1*. From the configs all we know is
that this pair of peers shares *net-1*. We cannot tell which of the 2 
actually is routing the network to the other. 

The resulting wireguard configs generated by *wg-tool* after importing
will match those that were imported.

If nothing changes, it doesn't really matter either. While importing these 
configs *wg-tool* we will simply assign the owner of *net1* to 
(our *nets_offered* varable) to the gateway. Regardless of which of these
2 peers actually is proving *net1* access.

Lets say it is actually the client that provides the network access
not the gateway.  

Let's see what happens if we don't correct this
and leave the gateway as the owner.

Now imagine what happens if the client here, the real provider of
access to *net1*, is made inactive. At this point the gateway is still 
claiming to provide access to *net1* for it's other clients and this
is of course is not true. 

Bottom line, after importing, run *wg-tool -lv* to get a listing
of all peers and which offer networks, and correct any that are 
incorrectly guessed. 

For example if *10.1.2.0/24* was incorrecly set to
peer vpn.serv.A instead of vpn.serv.B then you can correct this 
using:

.. code-block:: bash

   wg-tool --net-offered-del '10.1.2.0/24' vpn.serv.A
   wg-tool --net-offered-add '10.1.2.0/24' vpn.serv.B

You can of course use the *--edit* option to make changes as well.

It's a good idea to run *wg-tool -lv* after these changes so you can check
things are as expected.

If we import the wireguard configs from where we left Example 3, then
*wg-B* offer both networks instead of offering *192.168.2.0/24* and
wanting *192.168.1.0/24*. 

Furthermore, user-1 and user-2 show *internet* wanted
which is strictly correct though it was originally created with
wanting both *192.168.1.0/24* and *192.168.2.0/24* as well as internet.

Bottom line, after importing always manually clean up *nets_wanted* and 
*nets_offered*.

Back to importing.

Step 1: Create New VPN
----------------------

Before importing any configs you must create the vpn along with
some basic information about the vpn.
Ths is to establish the vpn name, networks and dns hosts.

You **must** establish the vpn networks that match those used
in the wireguard configs about to be imported.

To illustrate we'll create a new vpn called 'vpn-imported' with 
tunnel networks:

.. code-block:: none

   vpn_nets = ['10.77.77.0/24', 'fc00:77.77::/64']

This assumes that all configs about to be imported are using a 
tunnel IP address from those in *vpn_nets*.

This is best accomplished working in a fresh directory.

.. code-block:: bash

   wg-tool -wkd ./
   wg-tool --new vpn2

Now edit the vpn info file, name will be shown (*./Edits/vpn2-info.mods*)
and set the desired vpn networks and any DNS servers. 

.. code-block:: none

   dns = ["10.10.10.10"]
   peer_to_peer = false
   networks = [
        "10.10.10.0/24",
        "fc00:10.10::/64",
   ]

Then merge these changes back:

.. code-block:: bash

   wg-tool --merge ./Edits/vpn2-info.mods


Step 2: Import Standard Wireguard Configs into VPN
--------------------------------------------------

*wg-tool* uses a ID string taking the form:

.. code-block:: none

   <vpn-name>.<account-name>.<profile-name>

Import uses directory and file names that maps to such an ID.

Create the directory where all the wireguard configs will be imported from.
The top level directory name should be the vpn-name chosen above.

.. code-block:: bash

   mkdir vpn2

With the vpn details established all standard wireguards configs should be put into
under this *vpn2* directory. 

Directly under *vpn2* will be an *account* directory for each account.
Each account has it's profile config(s) in it's directory.

In other words, each config file should have it's file path end
with *vpn2/<account-name>/<profile-name>.conf*.

which tells the tool what ID is to be used for that config.

For example, the config file to be imported into *vpn-imported.sally.laptop*
should be placed in:

.. code-block:: none

   vpn-imported/sally/laptop.conf

Do this for all gateway and client configs to be imported. 

For any config that runs on a server, such as gateways or clients that provide LAN access,
we like to keep all of those under a *servers* account. Choose whatever names
you prefer but characters used should be alphanumeric along with any of "- = _ : , ~ + ;".

Once all the configs are in place, then we're ready to start the import.

.. code-block:: bash

   wg-tool --import-configs vpn2

This means the vpn name is *vpn2* and configs are imported from the 
within the *vpn2* directory.

All being well, you can check the newly generated configs run *wg-tool -lv* to
list the current state and look compare the newly generated configs under *Data-wg/vpn2*
with those that were imported from *vpn2/*

It's good to confirm the new configs are correct. In particular keys (public, private and pre-shared), 
along with AllowedIPs and Endpoints.

As discussed earlier, if needed, correct any networks being shared such that
the profile responsible for access to any network, has it so listed under it's
*nets_offered* variable and removed from any profile that is not the actual access
provider.

Likewise, especially if you made any changes to *nets_offered* you may need to adjust
*nets_wanted*.

If an error is encountered during the import, it should display a message and exit.

